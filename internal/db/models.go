// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ImprovementEnum string

const (
	ImprovementEnumImproving ImprovementEnum = "improving"
	ImprovementEnumStable    ImprovementEnum = "stable"
	ImprovementEnumWorsening ImprovementEnum = "worsening"
	ImprovementEnumVarying   ImprovementEnum = "varying"
)

func (e *ImprovementEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ImprovementEnum(s)
	case string:
		*e = ImprovementEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ImprovementEnum: %T", src)
	}
	return nil
}

type NullImprovementEnum struct {
	ImprovementEnum ImprovementEnum `json:"improvementEnum"`
	Valid           bool            `json:"valid"` // Valid is true if ImprovementEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullImprovementEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ImprovementEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ImprovementEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullImprovementEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ImprovementEnum), nil
}

type ProgressEnum string

const (
	ProgressEnumOpen       ProgressEnum = "open"
	ProgressEnumClosed     ProgressEnum = "closed"
	ProgressEnumInProgress ProgressEnum = "in-progress"
)

func (e *ProgressEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProgressEnum(s)
	case string:
		*e = ProgressEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ProgressEnum: %T", src)
	}
	return nil
}

type NullProgressEnum struct {
	ProgressEnum ProgressEnum `json:"progressEnum"`
	Valid        bool         `json:"valid"` // Valid is true if ProgressEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProgressEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ProgressEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProgressEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProgressEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProgressEnum), nil
}

type SeverityEnum string

const (
	SeverityEnumMild     SeverityEnum = "mild"
	SeverityEnumModerate SeverityEnum = "moderate"
	SeverityEnumSevere   SeverityEnum = "severe"
	SeverityEnumVariable SeverityEnum = "variable"
)

func (e *SeverityEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SeverityEnum(s)
	case string:
		*e = SeverityEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for SeverityEnum: %T", src)
	}
	return nil
}

type NullSeverityEnum struct {
	SeverityEnum SeverityEnum `json:"severityEnum"`
	Valid        bool         `json:"valid"` // Valid is true if SeverityEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSeverityEnum) Scan(value interface{}) error {
	if value == nil {
		ns.SeverityEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SeverityEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSeverityEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SeverityEnum), nil
}

type HealthRecord struct {
	ID              uuid.UUID       `json:"id"`
	UserID          uuid.UUID       `json:"userId"`
	ParentRecordID  uuid.NullUUID   `json:"parentRecordId"`
	Description     string          `json:"description"`
	Progress        ProgressEnum    `json:"progress"`
	Improvement     ImprovementEnum `json:"improvement"`
	Severity        SeverityEnum    `json:"severity"`
	TreatmentsTried []string        `json:"treatmentsTried"`
	CreatedAt       sql.NullTime    `json:"createdAt"`
	UpdatedAt       sql.NullTime    `json:"updatedAt"`
}

type MedicalConsultation struct {
	ID              uuid.UUID `json:"id"`
	HealthRecordID  uuid.UUID `json:"healthRecordId"`
	Consultant      string    `json:"consultant"`
	Date            time.Time `json:"date"`
	Diagnosis       string    `json:"diagnosis"`
	FollowUpActions []string  `json:"followUpActions"`
}

type Symptom struct {
	ID             uuid.UUID    `json:"id"`
	HealthRecordID uuid.UUID    `json:"healthRecordId"`
	Name           string       `json:"name"`
	StartDate      sql.NullTime `json:"startDate"`
}

type User struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Email string    `json:"email"`
}
