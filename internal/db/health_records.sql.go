// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: health_records.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createHealthRecord = `-- name: CreateHealthRecord :one
INSERT INTO health_records (
    user_id,
    parent_record_id,
    description,
    progress,
    improvement,
    severity,
    treatments_tried
) VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, parent_record_id, description, progress, improvement, severity, treatments_tried, created_at, updated_at
`

type CreateHealthRecordParams struct {
	UserID          uuid.UUID       `json:"userId"`
	ParentRecordID  uuid.NullUUID   `json:"parentRecordId"`
	Description     string          `json:"description"`
	Progress        ProgressEnum    `json:"progress"`
	Improvement     ImprovementEnum `json:"improvement"`
	Severity        SeverityEnum    `json:"severity"`
	TreatmentsTried []string        `json:"treatmentsTried"`
}

func (q *Queries) CreateHealthRecord(ctx context.Context, arg CreateHealthRecordParams) (HealthRecord, error) {
	row := q.queryRow(ctx, q.createHealthRecordStmt, createHealthRecord,
		arg.UserID,
		arg.ParentRecordID,
		arg.Description,
		arg.Progress,
		arg.Improvement,
		arg.Severity,
		pq.Array(arg.TreatmentsTried),
	)
	var i HealthRecord
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ParentRecordID,
		&i.Description,
		&i.Progress,
		&i.Improvement,
		&i.Severity,
		pq.Array(&i.TreatmentsTried),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHealthRecord = `-- name: GetHealthRecord :one
SELECT id, user_id, parent_record_id, description, progress, improvement, severity, treatments_tried, created_at, updated_at FROM health_records
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHealthRecord(ctx context.Context, id uuid.UUID) (HealthRecord, error) {
	row := q.queryRow(ctx, q.getHealthRecordStmt, getHealthRecord, id)
	var i HealthRecord
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ParentRecordID,
		&i.Description,
		&i.Progress,
		&i.Improvement,
		&i.Severity,
		pq.Array(&i.TreatmentsTried),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listHealthRecords = `-- name: ListHealthRecords :many
SELECT id, user_id, parent_record_id, description, progress, improvement, severity, treatments_tried, created_at, updated_at FROM health_records
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListHealthRecords(ctx context.Context, userID uuid.UUID) ([]HealthRecord, error) {
	rows, err := q.query(ctx, q.listHealthRecordsStmt, listHealthRecords, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HealthRecord
	for rows.Next() {
		var i HealthRecord
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ParentRecordID,
			&i.Description,
			&i.Progress,
			&i.Improvement,
			&i.Severity,
			pq.Array(&i.TreatmentsTried),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
